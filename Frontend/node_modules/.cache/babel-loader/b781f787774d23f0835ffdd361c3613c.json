{"ast":null,"code":"import _objectSpread from \"/Users/tarunparve/Downloads/crudss/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/tarunparve/Downloads/crudss/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar booksReducerDefaultState = [];\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : booksReducerDefaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_BOOK':\n      return [].concat(_toConsumableArray(state), [action.book]);\n\n    case 'EDIT_BOOK':\n      return state.map(function (book) {\n        if (book.id === action.id) {\n          return _objectSpread({}, book, action.updates);\n        } else {\n          return book;\n        }\n      });\n\n    case 'REMOVE_BOOK':\n      return state.filter(function (_ref) {\n        var id = _ref.id;\n        return id !== action.id;\n      });\n\n    case 'GET_BOOKs':\n      return action.books;\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/tarunparve/Downloads/crudss/src/components/reducer/booksReducer.jsx"],"names":["booksReducerDefaultState","state","action","type","book","map","id","updates","filter","books"],"mappings":";;AAAA,IAAMA,wBAAwB,GAAG,EAAjC;AAEA,gBAAe,YAA8C;AAAA,MAA7CC,KAA6C,uEAArCD,wBAAqC;AAAA,MAAXE,MAAW;;AAEzD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAK,UAAL;AACI,0CAAYF,KAAZ,IAAmBC,MAAM,CAACE,IAA1B;;AAEJ,SAAK,WAAL;AACI,aAAOH,KAAK,CAACI,GAAN,CAAU,UAACD,IAAD,EAAU;AACvB,YAAIA,IAAI,CAACE,EAAL,KAAYJ,MAAM,CAACI,EAAvB,EAA2B;AACvB,mCACOF,IADP,EAEOF,MAAM,CAACK,OAFd;AAIH,SALD,MAKO;AACH,iBAAOH,IAAP;AACH;AACJ,OATM,CAAP;;AAWJ,SAAK,aAAL;AACI,aAAOH,KAAK,CAACO,MAAN,CAAa;AAAA,YAAGF,EAAH,QAAGA,EAAH;AAAA,eAAYA,EAAE,KAAKJ,MAAM,CAACI,EAA1B;AAAA,OAAb,CAAP;;AAEJ,SAAK,WAAL;AACI,aAAOJ,MAAM,CAACO,KAAd;;AAEJ;AACI,aAAOR,KAAP;AAxBR;AA0BH,CA5BD","sourcesContent":["const booksReducerDefaultState = [];\n\nexport default (state = booksReducerDefaultState, action) => {\n\n    switch (action.type) {\n\n        case 'ADD_BOOK':\n            return [ ...state, action.book ];\n\n        case 'EDIT_BOOK':\n            return state.map((book) => {\n                if (book.id === action.id) {\n                    return {\n                        ...book,\n                        ...action.updates\n                    };\n                } else {\n                    return book;\n                }\n            });\n        \n        case 'REMOVE_BOOK':\n            return state.filter(({ id }) => id !== action.id);\n\n        case 'GET_BOOKs':\n            return action.books;\n\n        default:\n            return state;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}